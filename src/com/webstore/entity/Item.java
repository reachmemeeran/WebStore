package com.webstore.entity;
// Generated 27-Nov-2020, 6:52:12 AM by Hibernate Tools 5.2.12.Final

import java.util.Base64;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

/**
 * Item generated by hbm2java
 */
@Entity
@Table(name = "item", catalog = "webstoredb", uniqueConstraints = @UniqueConstraint(columnNames = "title"))
@NamedQueries({
	@NamedQuery(name="Item.findAll", query= "SELECT b FROM Item b ORDER BY b.itemId"),
	@NamedQuery(name="Item.countAll", query= "SELECT count(*) FROM Item b"),
	@NamedQuery(name="Item.findByTitle",query="SELECT b FROM Item b WHERE b.title=:title"),
	@NamedQuery(name="Item.findByCategory",query="SELECT b FROM Item b JOIN "
			+ "Category c ON b.category.categoryId=c.categoryId AND c.categoryId=:catId"),
	@NamedQuery(name="Item.listFirstCategory",query="SELECT b FROM Item b JOIN "
			+ "Category c ON b.category.categoryId=1"),
	@NamedQuery(name="Item.listNew",query="SELECT b FROM Item b ORDER BY b.itemId DESC"),
	@NamedQuery(name="Item.search",query="SELECT b FROM Item b WHERE b.title LIKE '%'|| :keyword || '%'"
			+ " OR b.description LIKE '%'|| :keyword || '%'"),
	@NamedQuery(name="Item.countByCategory",query="SELECT count(b) FROM Item b JOIN "
			+ "Category c ON b.category.categoryId=c.categoryId AND c.categoryId=:catId")
})
public class Item implements java.io.Serializable {

	private int itemId;
	private Category category;
	private String title;
	private String description;
	private byte[] image;
	private String base64Image;
	private float falsePrice;
	private float price;
	private Date lastUpdateTime;
	private int unitstock;
	private Set<Review> reviews = new HashSet<Review>(0);
	private Set<OrderDetail> orderDetails = new HashSet<OrderDetail>(0);

	public Item() {
	}

	public Item(int itemId) {
		super();
		this.itemId = itemId;
	}

	public Item(int itemId, Category category, String title,  String description, 
			byte[] image, float price,float falsePrice,int unitstock,  Date lastUpdateTime) {
		this.itemId = itemId;
		this.category = category;
		this.title = title;
		this.description = description;
		this.image = image;
		this.price = price;
		this.falsePrice = falsePrice;
		this.unitstock=unitstock;
		this.lastUpdateTime = lastUpdateTime;
	}

	public Item(int itemId, Category category, String title, String description,
			byte[] image, float price,float falsePrice,int unitstock, Date lastUpdateTime, Set<Review> reviews,
			Set<OrderDetail> orderDetails) {
		this.itemId = itemId;
		this.category = category;
		this.title = title;
		this.description = description;
		this.image = image;
		this.price = price;
		this.falsePrice = falsePrice;
		this.lastUpdateTime = lastUpdateTime;
		this.reviews = reviews;
		this.unitstock=unitstock;
		this.orderDetails = orderDetails;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "item_id", unique = true, nullable = false)
	public int getItemId() {
		return this.itemId;
	}

	public void setItemId(int itemId) {
		this.itemId = itemId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "category_id", nullable = false)
	public Category getCategory() {
		return this.category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}

	@Column(name = "title", unique = true, nullable = false, length = 128)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "description", nullable = false, length = 16777215)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "image", nullable = false)
	public byte[] getImage() {
		return this.image;
	}

	public void setImage(byte[] image) {
		this.image = image;
	}

	@Column(name = "false_price", nullable = false, precision = 12, scale = 0)
	public float getFalsePrice() {
		return this.falsePrice;
	}

	public void setFalsePrice(float falsePrice) {
		this.falsePrice = falsePrice;
	}
	
	@Column(name = "price", nullable = false, precision = 12, scale = 0)
	public float getPrice() {
		return this.price;
	}

	public void setPrice(float price) {
		this.price = price;
	}
	
	@Column(name = "unitstock", nullable = false)
	public int getUnitstock() {
		return this.unitstock;
	}

	public void setUnitstock(int unitstock) {
		this.unitstock = unitstock;
	}


	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_update_time", nullable = false, length = 19)
	public Date getLastUpdateTime() {
		return this.lastUpdateTime;
	}

	public void setLastUpdateTime(Date lastUpdateTime) {
		this.lastUpdateTime = lastUpdateTime;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "item")
	public Set<Review> getReviews() {
		TreeSet<Review> sortedReviews = new TreeSet<>(new Comparator<Review>() {

			@Override
			public int compare(Review review1, Review review2) {
				return review2.getReviewTime().compareTo(review1.getReviewTime());
			}
		});
		sortedReviews.addAll(reviews);
		return sortedReviews;
	}

	public void setReviews(Set<Review> reviews) {
		this.reviews = reviews;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "item")
	public Set<OrderDetail> getOrderDetails() {
		return this.orderDetails;
	}

	public void setOrderDetails(Set<OrderDetail> orderDetails) {
		this.orderDetails = orderDetails;
	}
	
	@Transient
	public String getBase64Image() {
		this.base64Image= Base64.getEncoder().encodeToString(this.image);
		return this.base64Image;
	}
	
	@Transient
	public void setBase64Image(String base64Image) {
		this.base64Image = base64Image;
	}
	
	@Transient
	public float getAverageRating() {
		float averageRating = 0.0f;
		float sum=0.0f;
		
		if(reviews.isEmpty()) {
			return 0.0f;
		}
		
		for(Review review : reviews) {
			sum += review.getRating();
		}
		
		averageRating = sum/reviews.size();
		
		return averageRating;
	}
	
	@Transient
	public String getRatingStars() {
		float averageRating = getAverageRating();
		
		return getRatingString(averageRating);
	}
	
	
	@Transient
	public String getRatingString(float averageRating) {
		String result = "";
		
		int numberOfStartsOn = (int) averageRating;
		
		for(int i=1; i<=numberOfStartsOn; i++) {
			result += "on,";
		}
		
		int next = numberOfStartsOn +1 ;
		
		if(averageRating > numberOfStartsOn) {
			result += "half,";
			next++;
		}
		
		for(int j= next; j<=5; j++) {
			result += "off,";
		}
		
		return result.substring(0,result.length()-1);
	}
	

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + itemId;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Item other = (Item) obj;
		if (itemId != other.itemId)
			return false;
		return true;
	}

}
